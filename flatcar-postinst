#!/bin/bash
# Copyright (c) 2014 The CoreOS Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

set -e
umask 0022

OEM_MNT="/usr/share/oem"

INSTALL_MNT=$(dirname "$0")
INSTALL_DEV="$1"
INSTALL_KERNEL=""

for arg in "$@"; do
    case "${arg}" in
        KERNEL=*) INSTALL_KERNEL="${arg#KERNEL=}" ;;
    esac
done

# Figure out if the slot id is A or B
INSTALL_LABEL=$(blkid -o value -s PARTLABEL "${INSTALL_DEV}")
case "${INSTALL_LABEL}" in
    ROOT-A|USR-A)
        SLOT=A;;
    ROOT-B|USR-B)
        SLOT=B;;
    *)
        echo "Unknown LABEL ${INSTALL_LABEL}" >&2
        exit 1
esac

# Find the ESP partition and mount it if needed
ESP_PARTTYPE="c12a7328-f81f-11d2-ba4b-00a0c93ec93b"
ESP_MNT=

declare -a DEV_LIST
mapfile DEV_LIST < <(lsblk -P -o NAME,PARTTYPE,MOUNTPOINT)

for dev_info in "${DEV_LIST[@]}"; do
    eval "$dev_info"

    if [[ "${PARTTYPE}" != "${ESP_PARTTYPE}" ]]; then
        continue
    fi

    if [[ -n "${MOUNTPOINT}" ]]; then
        ESP_MNT="${MOUNTPOINT}"
    else
        ESP_MNT="$(mktemp -d /tmp/postinst_esp.XXXXXXXXXX)"
        mount "/dev/${NAME}" "${ESP_MNT}"
        trap "umount '${ESP_MNT}' && rmdir '${ESP_MNT}'" EXIT
    fi

    break
done

if [[ -z "${ESP_MNT}" ]]; then
    echo "Failed to find ESP partition!" >&2
    exit 1
fi

if [[ ! -d "${ESP_MNT}" ]]; then
    echo "ESP partition mount point (${ESP_MNT}) is not a directory!" >&2
    exit 1
fi

# Update bootloaders from CoreOS <= 522.x.x
if grep -q cros_legacy /proc/cmdline; then
    # Update kernel and bootloader configs
    mkdir -p "${ESP_MNT}"{/syslinux,/boot/grub}
    cp -v "${INSTALL_MNT}/boot/vmlinuz" \
        "${ESP_MNT}/syslinux/vmlinuz.${SLOT}"
    cp -v "${INSTALL_MNT}/boot/syslinux/root.${SLOT}.cfg" \
        "${ESP_MNT}/syslinux/root.${SLOT}.cfg"

    # For Xen's pvgrub
    cp -v "${INSTALL_MNT}/boot/grub/menu.lst.${SLOT}" \
        "${ESP_MNT}/boot/grub/menu.lst"

    # For systems that have disabled boot_kernel and kexec
    if ! grep -q boot_kernel "${ESP_MNT}/syslinux/default.cfg"; then
        cp -v "${INSTALL_MNT}/boot/syslinux/default.cfg.${SLOT}" \
            "${ESP_MNT}/syslinux/default.cfg"
    fi
elif [[ -z "${INSTALL_KERNEL}" ]]; then
    # not a legacy system but update_engine didn't handle the kernel.
    # kernel names are in lower case, ${SLOT,,} converts the slot name
    cp -v "${INSTALL_MNT}/boot/vmlinuz" \
       "${ESP_MNT}/flatcar/vmlinuz-${SLOT,,}"
fi

# If the OEM provides a hook, call it
if [[ -x "${OEM_MNT}/bin/oem-postinst" ]]; then
    "${OEM_MNT}/bin/oem-postinst" "${SLOT}" "${INSTALL_MNT}"
fi

# locksmith 0.1.5 is broken, restart it lots to work around the issue
if systemctl is-active --quiet locksmithd.service && \
    locksmithctl help | grep -A1 '^VERSION:' | grep -q '0.1.5$';
then
    echo "Broken locksmith 0.1.5 detected, installing workaround timer."
    # In one minute start restarting locksmithd every 5 minutes.
    cat >/run/systemd/system/locksmithd-kicker.timer <<EOF
[Timer]
OnActiveSec=1min
OnUnitActiveSec=5min
EOF
    cat >/run/systemd/system/locksmithd-kicker.service <<EOF
[Service]
Type=oneshot
ExecStart=/usr/bin/systemctl try-restart --no-block locksmithd.service
EOF
    systemctl start --no-block locksmithd-kicker.timer
fi

# Azure's agent erroneously looks at the distribution name instead of its ID.
# This prevents us from renaming the OS from "CoreOS". This patches platform.py
# to always return "CoreOS" as the distribution name.
PLATFORM_PATH="/usr/share/oem/python/lib64/python2.7/platform.py"
if [ -e ${PLATFORM_PATH} ]; then
    sum=($(md5sum ${PLATFORM_PATH}))
    if [ ${sum} == "6315addf42c0b07f5f78d119b578e20a" ]; then
        sed --in-place \
            "s%distname = os_release_info\['NAME'\]%distname = \"CoreOS\"%" \
            ${PLATFORM_PATH}
    fi
fi

# Our VMware OEM partition contained a version of vmtoolsd that was vulnerable to 
# CVE-2015-5191 (http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5191).
# This CVE can be mitigated by setting PrivateTmp=true on the vmtoolsd service file.
# coreos-base/oem-vmware-10.1.5 is the last vulnerable version of the oem ebuild.
# Note: we check in both /etc/oem-release and /usr/share/oem/oem-release
# because pre-ignition Container Linux machines did not set the oem.id cmdline,
# and also wrote oem-release only to /etc
VMTOOLSD_DROPIN=/etc/systemd/system/vmtoolsd.service.d/90-tmpfiles-cve-2015-4191.conf
if [ ! -e $VMTOOLSD_DROPIN ] && grep --quiet --no-messages "^ID=vmware$" /etc/oem-release /usr/share/oem/oem-release; then
    mkdir -p /etc/systemd/system/vmtoolsd.service.d/
    cat >$VMTOOLSD_DROPIN <<EOF
# This file is automatically added during updates to mitigate CVE-2015-5191.
# See http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5191 for more info
# on the CVE.
# If you believe this file causes any issue, please report it as a bug to
# CoreOS.
[Service]
PrivateTmp=true
EOF
fi

# Tectonic backed itself into a corner by depending on the docker version
# shipped in Container Linux but not actively ensuring that they kept clusters
# up-to-date. As a result, the OS has continued to ship an old docker to work
# around the issue. Now that Tectonic is able to specify the version of docker,
# the default version of docker can be updated. Unfortunately, this can't be
# done until all clusters have fallen out of support or have updated. In order
# to expedite this process, the /etc/coreos/docker-1.12 flag file has been
# added, which can signal that the installed version of docker should remain at
# 1.12.6. This next chunk of black magic attempts to determine if the machine
# is a part of a Tectonic cluster and, if so, write the flag file so that old
# clusters aren't caught up in the docker-version bump.
#
# This code works by looking at the kubelet.service and a particular sysctl
# entry that have always been written by the Tectonic installer. After
# stripping out known variables and commonly-added user modifications, the
# contents are hashed and compared against a known, good list. This list was
# derived from every kubelet.service we have ever shipped in Tectonic. This was
# not a particularly fun exercise.
good_kubelet() {
    KUBELET_PATH="/etc/systemd/system/kubelet.service"
    declare -A GOOD_KUBELET_SUMS=(
        [9aa254d55054fab5de48ca4e97ac3f0f]=1
        [838ca6c80119a7daf9fdc3881698d058]=1
        [35dd901dd87291df1ad8b6bf9b60a174]=1
        [43af37f891e555c5e4cf7c18478fce54]=1
        [c27121efdd210cc05a28c122f8f4a145]=1
        [f4cab5080e349a999197daace5ca971c]=1
        [71f8b465420d9373a536424eb81987ad]=1
        [997f455cd2a02ce885e5ec7db4755fa5]=1
        [69d890f526fe59da3117f56583bc9929]=1
        [46a19863e5497f903fb3fdc0fbda9137]=1
        [42357b95fc5ae52b476b8eb5c58ebb42]=1
        [ee5ef7bb3443f872fe470f4eab586b3c]=1
        [5b08a40b4f8312c4710b1676b761a9b0]=1
        [879210fde7b8a3c8c02b8646dd06a35e]=1
        [b0cf744da1a9b5df933baabdcfb5bf7f]=1
        [b3c382658e55ada45a819c3274d25cb2]=1
        [852dd9b686429b84144b36e101305968]=1
    )

    [ -f $KUBELET_PATH ] || return 1

    # Remove all whitespace (including newlines), backslashes, known variables
    # (the first six expressions), and commonly-added user options (the next
    # two expressions) before determining the md5 sum.
    sum=$(sed \
        --regexp-extended \
        --expression '/--cloud-provider=/d' \
        --expression '/--hostname-override=/d' \
        --expression '/--cluster-dns=/d' \
        --expression '/--cluster_dns=/d' \
        --expression '/--node-labels=/d' \
        --expression '/--cni-bin-dir=/d' \
        --expression '/--register-with-taints=/d' \
        --expression '/\/opt\/s3-puller.sh/d' \
        --expression '/-v=/d' \
        --expression '/-vmodule=/d' \
        --expression 's/\s//g' \
        --expression 's/\\//g' \
        $KUBELET_PATH | tr --delete '\n' | md5sum | gawk '{print $1}')

    [[ -n "${GOOD_KUBELET_SUMS[${sum}]}" ]] && return 0
}

good_sysctl() {
    SYSCTL_PATH="/etc/sysctl.d/max-user-watches.conf"
    declare -A GOOD_SYSCTL_SUMS=(
        [6de69b29eccf652d476f68c1abf3d0db]=1
        [52ddc3d78f9ce25f068c6da1c1f7f2f3]=1
    )

    [ -f $SYSCTL_PATH ] || return 1

    sum=$(md5sum $SYSCTL_PATH | gawk '{print $1}')

    [[ -n "${GOOD_SYSCTL_SUMS[${sum}]}" ]] && return 0
}

# Check to make sure that the current version is less than 1576 (this is the
# first release to include this Tectonic work-around). This ensures that we
# only apply this work-around one time.
source /usr/lib/os-release
DOCKER_FLAG_PATH="/etc/flatcar/docker-1.12"
if [ ! -e "${DOCKER_FLAG_PATH}" ] && [ "${VERSION_ID%%.*}" -lt 1576 ] &&
    good_kubelet && good_sysctl
then
    echo "Detected a Tectonic cluster. Writing docker override..."
    cat > "${DOCKER_FLAG_PATH}" <<< yes
fi

# use the cgpt binary from the image to ensure compatibility
CGPT=
for bindir in bin/old_bins bin sbin; do
    if [[ -x "${INSTALL_MNT}/${bindir}/cgpt" ]]; then
        CGPT="${INSTALL_MNT}/${bindir}/cgpt"
        break
    fi
done
if [[ -z "${CGPT}" ]]; then
    echo "Failed to locate the cgpt binary in ${INSTALL_MNT}" >&2
    exit 1
fi

# locate the dynamic linker
LDSO=
for l in "${INSTALL_MNT}"/lib*/ld-2.??.so; do
    if [[ -x "$l" ]]; then
        LDSO="$l"
        break
    fi
done
if [[ -z "${LDSO}" ]]; then
    echo "Failed to locate ld.so in ${INSTALL_MNT}" >&2
    exit 1
fi
LIBS="${LDSO%/*}"

call_cgpt() {
    "${LDSO}" --library-path "${LIBS}" "${CGPT}" "$@"
}

# Mark the new install with one try and the highest priority
call_cgpt repair "${INSTALL_DEV}"
call_cgpt add -S0 -T1 "${INSTALL_DEV}"
call_cgpt prioritize "${INSTALL_DEV}"
call_cgpt show "${INSTALL_DEV}"

cat "${INSTALL_MNT}/share/flatcar/release"
echo "Setup ${INSTALL_LABEL} (${INSTALL_DEV}) for next boot."
